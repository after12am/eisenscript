/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,18,30,32,33,34,35,36,37,44,45,48,57,89,90,91,92,93,94,95,96,97,98],$V1=[30,48,57,89,90,91,92,93,94,95,96,97,98],$V2=[2,68],$V3=[1,19],$V4=[1,17],$V5=[1,18],$V6=[1,20],$V7=[1,21],$V8=[1,22],$V9=[1,32],$Va=[1,37],$Vb=[1,38],$Vc=[1,39],$Vd=[1,40],$Ve=[1,76],$Vf=[5,18,30,32,33,34,35,36,37,44,45,48,50,57,74,75,76,77,78,79,80,81,82,83,84,89,90,91,92,93,94,95,96,97,98],$Vg=[5,18,19,30,32,33,34,35,36,37,44,45,48,50,52,53,57,70,71,74,75,76,77,78,79,80,81,82,83,84,86,89,90,91,92,93,94,95,96,97,98],$Vh=[19,48,52],$Vi=[2,114],$Vj=[5,18,30,32,33,34,35,36,37,44,45,48,50,57,89,90,91,92,93,94,95,96,97,98],$Vk=[18,32,33,34,35,36,37,50,74,75,76,77,78,79,80,81,82,83,84],$Vl=[60,66,70,71,89],$Vm=[30,48,50,57,89,90,91,92,93,94,95,96,97,98],$Vn=[1,152],$Vo=[1,153],$Vp=[60,66,69,70,71,89],$Vq=[1,183];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"eisenscript":3,"lines":4,"EOF":5,"line":6,"maxdepth":7,"maxobjects":8,"minsize":9,"maxsize":10,"seed":11,"background":12,"color":13,"colorpool":14,"define":15,"rule":16,"statement":17,"SET":18,"MAXDEPTH":19,"num":20,"MAXOBJECTS":21,"MINSIZE":22,"MAXSIZE":23,"SEED":24,"INITIAL":25,"BACKGROUND":26,"COLOR3":27,"COLOR6":28,"COLORNAME":29,"STRING":30,"RANDOM":31,"COLOR":32,"HUE":33,"ALPHA":34,"BLEND":35,"SATURATION":36,"BRIGHTNESS":37,"COLORPOOL":38,"RANDOMHUE":39,"RANDOMRGB":40,"GREYSCALE":41,"COLORLIST":42,"IMAGE":43,"DEFINE":44,"RULE":45,"id":46,"modifiers":47,"{":48,"statements":49,"}":50,"modifier":51,"WEIGHT":52,">":53,"rulename":54,"expressions":55,"primitive":56,"TRIANGLE":57,"[":58,"coords":59,"]":60,"expression":61,"object":62,"n":63,"*":64,"properties":65,"COORD_DELIMITER":66,"coord":67,"coord_point":68,",":69,"+":70,"-":71,"property":72,"geo":73,"XSHIFT":74,"YSHIFT":75,"ZSHIFT":76,"ROTATEX":77,"ROTATEY":78,"ROTATEZ":79,"SIZE":80,"MATRIX":81,"FX":82,"FY":83,"FZ":84,"/":85,"(":86,"e":87,")":88,"NUMBER":89,"BOX":90,"SPHERE":91,"GRID":92,"LINE":93,"POINT":94,"MESH":95,"CYLINDER":96,"TUBE":97,"SQUASH":98,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",18:"SET",19:"MAXDEPTH",21:"MAXOBJECTS",22:"MINSIZE",23:"MAXSIZE",24:"SEED",25:"INITIAL",26:"BACKGROUND",27:"COLOR3",28:"COLOR6",29:"COLORNAME",30:"STRING",31:"RANDOM",32:"COLOR",33:"HUE",34:"ALPHA",35:"BLEND",36:"SATURATION",37:"BRIGHTNESS",38:"COLORPOOL",39:"RANDOMHUE",40:"RANDOMRGB",41:"GREYSCALE",42:"COLORLIST",43:"IMAGE",44:"DEFINE",45:"RULE",48:"{",50:"}",52:"WEIGHT",53:">",57:"TRIANGLE",58:"[",60:"]",64:"*",66:"COORD_DELIMITER",69:",",70:"+",71:"-",74:"XSHIFT",75:"YSHIFT",76:"ZSHIFT",77:"ROTATEX",78:"ROTATEY",79:"ROTATEZ",80:"SIZE",81:"MATRIX",82:"FX",83:"FY",84:"FZ",85:"/",86:"(",87:"e",88:")",89:"NUMBER",90:"BOX",91:"SPHERE",92:"GRID",93:"LINE",94:"POINT",95:"MESH",96:"CYLINDER",97:"TUBE",98:"SQUASH"},
productions_: [0,[3,2],[4,2],[4,0],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,3],[8,3],[9,3],[10,3],[11,3],[11,3],[12,3],[12,3],[12,3],[12,3],[12,3],[13,3],[13,2],[13,2],[13,2],[13,2],[13,2],[13,2],[13,2],[13,2],[13,2],[13,3],[13,3],[13,3],[13,3],[13,3],[13,2],[13,2],[13,2],[13,2],[14,3],[14,3],[14,3],[14,3],[14,3],[15,3],[15,3],[15,3],[15,3],[16,6],[47,2],[47,0],[51,2],[51,2],[51,4],[51,2],[51,4],[49,2],[49,0],[17,2],[17,5],[17,2],[55,2],[55,0],[61,1],[61,3],[61,3],[62,3],[59,3],[59,2],[59,0],[67,5],[68,1],[68,2],[68,2],[65,2],[65,0],[72,1],[72,1],[73,2],[73,2],[73,2],[73,2],[73,2],[73,2],[73,2],[73,4],[73,10],[73,2],[73,2],[73,2],[73,2],[73,2],[73,2],[73,1],[73,1],[73,1],[73,2],[73,4],[73,10],[20,1],[20,2],[20,2],[20,3],[20,3],[20,4],[20,4],[20,3],[63,1],[46,1],[54,1],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = $$[$0-1]; return this.$; 
break;
case 2: case 55: case 62: case 67: case 74:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: case 56: case 63: case 68: case 75: case 81:
 this.$ = []; 
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13:
 this.$ = $$[$0]; 
break;
case 14:
 this.$ = $$[$0]; $$[$0].computed = true; 
break;
case 15:
 this.$ = { type: 'set', key: 'maxdepth', value: $$[$0] }; 
break;
case 16:
 this.$ = { type: 'set', key: 'maxobjects', value: $$[$0] }; 
break;
case 17:
 this.$ = { type: 'set', key: 'minsize', value: $$[$0] }; 
break;
case 18:
 this.$ = { type: 'set', key: 'maxsize', value: $$[$0] }; 
break;
case 19: case 20:
 this.$ = { type: 'set', key: 'seed', value: $$[$0] }; 
break;
case 21: case 22: case 23: case 24: case 25:
 this.$ = { type: 'set', key: 'background', value: $$[$0].toLowerCase() }; 
break;
case 26:
 this.$ = { type: 'set', key: 'color', value: $$[$0].toLowerCase() }; 
break;
case 27:
 this.$ = { type: 'property', key: 'hue',   value: $$[$0] }; 
break;
case 28:
 this.$ = { type: 'property', key: 'hue',   value: $$[$0], defined: true }; 
break;
case 29:
 this.$ = { type: 'property', key: 'alpha', value: $$[$0] }; 
break;
case 30:
 this.$ = { type: 'property', key: 'alpha', value: $$[$0], defined: true }; 
break;
case 31: case 32: case 33: case 34:
 this.$ = { type: 'property', key: 'color', value: $$[$0].toLowerCase() }; 
break;
case 35:
 this.$ = { type: 'property', key: 'color', value: $$[$0].toLowerCase(), defined: true }; 
break;
case 36: case 37: case 38: case 39: case 40:
 this.$ = { type: 'property', key: 'blend', color: $$[$0-1].toLowerCase(), strength: $$[$0] }; 
break;
case 41:
 this.$ = { type: 'property', key: 'saturation', value: $$[$0] }; 
break;
case 42:
 this.$ = { type: 'property', key: 'saturation', value: $$[$0], defined: true }; 
break;
case 43:
 this.$ = { type: 'property', key: 'brightness', value: $$[$0] }; 
break;
case 44:
 this.$ = { type: 'property', key: 'brightness', value: $$[$0], defined: true }; 
break;
case 45: case 46: case 47: case 48: case 49:
 this.$ = { type: 'set', key: 'colorpool', value: $$[$0].toLowerCase() }; 
break;
case 50: case 51: case 52: case 53:
 this.$ = { type: 'define', varname: $$[$0-1], value: $$[$0] }; 
break;
case 54:
 this.$ = { type: 'rule', id: $$[$0-4], params: $$[$0-3], body: $$[$0-1] }; 
break;
case 57:
 this.$ = { type: 'modifier', key: 'weight',   value: $$[$0] }; 
break;
case 58:
 this.$ = { type: 'modifier', key: 'maxdepth', value: $$[$0] }; 
break;
case 59:
 this.$ = { type: 'modifier', key: 'maxdepth', value: $$[$0-2], alternate: $$[$0]}; 
break;
case 60:
 this.$ = { type: 'modifier', key: 'maxdepth', value: $$[$0], defined: true }; 
break;
case 61:
 this.$ = { type: 'modifier', key: 'maxdepth', value: $$[$0-2], alternate: $$[$0], defined: true}; 
break;
case 64:
 this.$ = { type: 'primitive', id: $$[$0], exprs: $$[$0-1] }; 
break;
case 65:
 this.$ = { type: 'primitive', coords: $$[$0-1], id: $$[$0-3], exprs: $$[$0-4] }; 
break;
case 66:
 this.$ = { type: 'statement', id: $$[$0], exprs: $$[$0-1] }; 
break;
case 69:
 this.$ = { type: 'expr', left:  1, right: $$[$0] }; 
break;
case 70: case 71:
 this.$ = { type: 'expr', left: $$[$0-2], right: $$[$0] }; 
break;
case 72:
 this.$ = { type: 'object', properties: $$[$0-1] }; 
break;
case 73:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 76:
 this.$ = [$$[$0-4], $$[$0-2], $$[$0]]; 
break;
case 78: case 106:
 this.$ =  $$[$0]; 
break;
case 79: case 107:
 this.$ = -$$[$0]; 
break;
case 80:
 type: 'property', this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 84:
 this.$ = { type: 'property', key: 'xshift',  value: $$[$0] }; 
break;
case 85:
 this.$ = { type: 'property', key: 'yshift',  value: $$[$0] }; 
break;
case 86:
 this.$ = { type: 'property', key: 'zshift',  value: $$[$0] }; 
break;
case 87:
 this.$ = { type: 'property', key: 'rotatex', value: $$[$0] }; 
break;
case 88:
 this.$ = { type: 'property', key: 'rotatey', value: $$[$0] }; 
break;
case 89:
 this.$ = { type: 'property', key: 'rotatez', value: $$[$0] }; 
break;
case 90:
 this.$ = { type: 'property', key: 'size',    value: { x: $$[$0], y: $$[$0], z: $$[$0] } }; 
break;
case 91:
 this.$ = { type: 'property', key: 'size',    value: { x: $$[$0-2], y: $$[$0-1], z: $$[$0] } }; 
break;
case 92:
 this.$ = { type: 'property', key: 'matrix', value: [$$[$0-8], $$[$0-7], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]] }; 
break;
case 93:
 this.$ = { type: 'property', key: 'xshift',  value: $$[$0], defined: true }; 
break;
case 94:
 this.$ = { type: 'property', key: 'yshift',  value: $$[$0], defined: true }; 
break;
case 95:
 this.$ = { type: 'property', key: 'zshift',  value: $$[$0], defined: true }; 
break;
case 96:
 this.$ = { type: 'property', key: 'rotatex', value: $$[$0], defined: true }; 
break;
case 97:
 this.$ = { type: 'property', key: 'rotatey', value: $$[$0], defined: true }; 
break;
case 98:
 this.$ = { type: 'property', key: 'rotatez', value: $$[$0], defined: true }; 
break;
case 99:
 this.$ = { type: 'property', key: 'fx' }; 
break;
case 100:
 this.$ = { type: 'property', key: 'fy' }; 
break;
case 101:
 this.$ = { type: 'property', key: 'fz' }; 
break;
case 102:
 this.$ = { type: 'property', key: 'size',    value: { x: $$[$0], y: $$[$0], z: $$[$0] }, defined: true }; 
break;
case 103:
 this.$ = { type: 'property', key: 'size',    value: { x: $$[$0-2], y: $$[$0-1], z: $$[$0] }, defined: true }; 
break;
case 104:
 this.$ = { type: 'property', key: 'matrix', value: [$$[$0-8], $$[$0-7], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]], defined: true }; 
break;
case 108:
 this.$ =  $$[$0-2]*$$[$0]; 
break;
case 109:
 this.$ =  $$[$0-2]/$$[$0]; 
break;
case 110:
 this.$ = -$$[$0-2]*$$[$0]; 
break;
case 111:
 this.$ = -$$[$0-2]/$$[$0]; 
break;
case 112:
 this.$ =  $$[$0-1]; 
break;
case 113:
 this.$ = parseFloat(yytext); 
break;
case 114: case 116: case 117: case 118: case 119: case 120: case 121: case 122: case 123: case 124: case 125:
 this.$ = yytext; 
break;
case 115:
this.$ = $$[$0]; 
break;
}
},
table: [o($V0,[2,3],{3:1,4:2}),{1:[3]},o($V1,$V2,{6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,55:25,5:[1,3],18:[1,16],32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,44:[1,23],45:[1,24]}),{1:[2,1]},o($V0,[2,2]),o($V0,[2,4]),o($V0,[2,5]),o($V0,[2,6]),o($V0,[2,7]),o($V0,[2,8]),o($V0,[2,9]),o($V0,[2,10]),o($V0,[2,11]),o($V0,[2,12]),o($V0,[2,13]),o($V0,[2,14]),{19:[1,26],21:[1,27],22:[1,28],23:[1,29],24:[1,30],26:[1,31],32:$V9,38:[1,33]},{20:34,30:[1,35],63:36,70:$Va,71:$Vb,86:$Vc,89:$Vd},{20:41,30:[1,42],63:36,70:$Va,71:$Vb,86:$Vc,89:$Vd},{27:[1,43],28:[1,44],29:[1,46],30:[1,47],31:[1,45]},{27:[1,48],28:[1,49],29:[1,50],30:[1,52],31:[1,51]},{20:53,30:[1,54],63:36,70:$Va,71:$Vb,86:$Vc,89:$Vd},{20:55,30:[1,56],63:36,70:$Va,71:$Vb,86:$Vc,89:$Vd},{30:[1,57]},{30:[1,59],46:58},{30:[1,73],46:62,48:$Ve,56:60,57:[1,61],61:63,62:74,63:75,89:$Vd,90:[1,64],91:[1,65],92:[1,66],93:[1,67],94:[1,68],95:[1,69],96:[1,70],97:[1,71],98:[1,72]},{20:77,63:36,70:$Va,71:$Vb,86:$Vc,89:$Vd},{20:78,63:36,70:$Va,71:$Vb,86:$Vc,89:$Vd},{20:79,63:36,70:$Va,71:$Vb,86:$Vc,89:$Vd},{20:80,63:36,70:$Va,71:$Vb,86:$Vc,89:$Vd},{20:81,25:[1,82],63:36,70:$Va,71:$Vb,86:$Vc,89:$Vd},{27:[1,83],28:[1,84],29:[1,85],30:[1,86],31:[1,87]},{31:[1,88]},{39:[1,89],40:[1,90],41:[1,91],42:[1,92],43:[1,93]},o($Vf,[2,27]),o($Vf,[2,28]),o($Vg,[2,105],{64:[1,94],85:[1,95]}),{63:96,89:$Vd},{63:97,89:$Vd},{87:[1,98]},o([5,18,19,30,32,33,34,35,36,37,44,45,48,50,52,53,57,60,64,66,69,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,89,90,91,92,93,94,95,96,97,98],[2,113]),o($Vf,[2,29]),o($Vf,[2,30]),o($Vf,[2,31]),o($Vf,[2,32]),o($Vf,[2,33]),o($Vf,[2,34]),o($Vf,[2,35]),{20:99,63:36,70:$Va,71:$Vb,86:$Vc,89:$Vd},{20:100,63:36,70:$Va,71:$Vb,86:$Vc,89:$Vd},{20:101,63:36,70:$Va,71:$Vb,86:$Vc,89:$Vd},{20:102,63:36,70:$Va,71:$Vb,86:$Vc,89:$Vd},{20:103,63:36,70:$Va,71:$Vb,86:$Vc,89:$Vd},o($Vf,[2,41]),o($Vf,[2,42]),o($Vf,[2,43]),o($Vf,[2,44]),{20:104,27:[1,105],28:[1,106],29:[1,107],63:36,70:$Va,71:$Vb,86:$Vc,89:$Vd},o($Vh,[2,56],{47:108}),o($Vh,$Vi),o($Vj,[2,64]),o($Vj,[2,121],{58:[1,109]}),o($Vj,[2,66]),o($V1,[2,67]),o($Vj,[2,116]),o($Vj,[2,117]),o($Vj,[2,118]),o($Vj,[2,119]),o($Vj,[2,120]),o($Vj,[2,122]),o($Vj,[2,123]),o($Vj,[2,124]),o($Vj,[2,125]),o($Vj,$Vi,{64:[1,110]}),o($V1,[2,69]),{64:[1,111]},o($Vk,[2,81],{65:112}),o($V0,[2,15]),o($V0,[2,16]),o($V0,[2,17]),o($V0,[2,18]),o($V0,[2,19]),o($V0,[2,20]),o($V0,[2,21]),o($V0,[2,22]),o($V0,[2,23]),o($V0,[2,24]),o($V0,[2,25]),o($Vf,[2,26]),o($V0,[2,45]),o($V0,[2,46]),o($V0,[2,47]),o($V0,[2,48]),o($V0,[2,49]),{63:113,89:$Vd},{63:114,89:$Vd},o($Vg,[2,106]),o($Vg,[2,107],{64:[1,115],85:[1,116]}),{88:[1,117]},o($Vf,[2,36]),o($Vf,[2,37]),o($Vf,[2,38]),o($Vf,[2,39]),o($Vf,[2,40]),o($V0,[2,50]),o($V0,[2,51]),o($V0,[2,52]),o($V0,[2,53]),{19:[1,121],48:[1,118],51:119,52:[1,120]},o($Vl,[2,75],{59:122}),{48:$Ve,62:123},{48:$Ve,62:124},{13:128,18:[1,140],32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,50:[1,125],72:126,73:127,74:[1,129],75:[1,130],76:[1,131],77:[1,132],78:[1,133],79:[1,134],80:[1,135],81:[1,136],82:[1,137],83:[1,138],84:[1,139]},o($Vg,[2,108]),o($Vg,[2,109]),{63:141,89:$Vd},{63:142,89:$Vd},o($Vg,[2,112]),o($Vm,[2,63],{49:143}),o($Vh,[2,55]),{20:144,63:36,70:$Va,71:$Vb,86:$Vc,89:$Vd},{20:145,30:[1,146],63:36,70:$Va,71:$Vb,86:$Vc,89:$Vd},{60:[1,147],63:151,66:[1,148],67:149,68:150,70:$Vn,71:$Vo,89:$Vd},o($V1,[2,71]),o($V1,[2,70]),o($V1,[2,72]),o($Vk,[2,80]),o($Vk,[2,82]),o($Vk,[2,83]),{20:154,30:[1,155],63:36,70:$Va,71:$Vb,86:$Vc,89:$Vd},{20:156,30:[1,157],63:36,70:$Va,71:$Vb,86:$Vc,89:$Vd},{20:158,30:[1,159],63:36,70:$Va,71:$Vb,86:$Vc,89:$Vd},{20:160,30:[1,161],63:36,70:$Va,71:$Vb,86:$Vc,89:$Vd},{20:162,30:[1,163],63:36,70:$Va,71:$Vb,86:$Vc,89:$Vd},{20:164,30:[1,165],63:36,70:$Va,71:$Vb,86:$Vc,89:$Vd},{20:166,30:[1,167],63:36,70:$Va,71:$Vb,86:$Vc,89:$Vd},{20:168,30:[1,169],63:36,70:$Va,71:$Vb,86:$Vc,89:$Vd},o($Vk,[2,99]),o($Vk,[2,100]),o($Vk,[2,101]),{32:$V9},o($Vg,[2,110]),o($Vg,[2,111]),o($V1,$V2,{55:25,17:171,50:[1,170]}),o($Vh,[2,57]),o($Vh,[2,58],{53:[1,172]}),o($Vh,[2,60],{53:[1,173]}),o($Vj,[2,65]),{63:151,67:174,68:150,70:$Vn,71:$Vo,89:$Vd},o($Vl,[2,74]),{69:[1,175]},o($Vp,[2,77]),{63:176,89:$Vd},{63:177,89:$Vd},o($Vk,[2,84]),o($Vk,[2,93]),o($Vk,[2,85]),o($Vk,[2,94]),o($Vk,[2,86]),o($Vk,[2,95]),o($Vk,[2,87]),o($Vk,[2,96]),o($Vk,[2,88]),o($Vk,[2,97]),o($Vk,[2,89]),o($Vk,[2,98]),o($Vk,[2,90],{63:36,20:178,70:$Va,71:$Vb,86:$Vc,89:$Vd}),o($Vk,[2,102],{30:[1,179]}),{20:180,63:36,70:$Va,71:$Vb,86:$Vc,89:$Vd},{30:[1,181]},o($V0,[2,54]),o($Vm,[2,62]),{30:$Vq,54:182},{30:$Vq,54:184},o($Vl,[2,73]),{63:151,68:185,70:$Vn,71:$Vo,89:$Vd},o($Vp,[2,78]),o($Vp,[2,79]),{20:186,63:36,70:$Va,71:$Vb,86:$Vc,89:$Vd},{30:[1,187]},{20:188,63:36,70:$Va,71:$Vb,86:$Vc,89:$Vd},{30:[1,189]},o($Vh,[2,59]),o($Vh,[2,115]),o($Vh,[2,61]),{69:[1,190]},o($Vk,[2,91]),o($Vk,[2,103]),{20:191,63:36,70:$Va,71:$Vb,86:$Vc,89:$Vd},{30:[1,192]},{63:151,68:193,70:$Vn,71:$Vo,89:$Vd},{20:194,63:36,70:$Va,71:$Vb,86:$Vc,89:$Vd},{30:[1,195]},o($Vl,[2,76]),{20:196,63:36,70:$Va,71:$Vb,86:$Vc,89:$Vd},{30:[1,197]},{20:198,63:36,70:$Va,71:$Vb,86:$Vc,89:$Vd},{30:[1,199]},{20:200,63:36,70:$Va,71:$Vb,86:$Vc,89:$Vd},{30:[1,201]},{20:202,63:36,70:$Va,71:$Vb,86:$Vc,89:$Vd},{30:[1,203]},o($Vk,[2,92]),o($Vk,[2,104])],
defaultActions: {3:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip */
break;
case 1:/* ignore comment */
break;
case 2:/* ignore comment */
break;
case 3:return 18
break;
case 4:return 52;
break;
case 5:return 52;
break;
case 6:return 19;
break;
case 7:return 19;
break;
case 8:return 21;
break;
case 9:return 22;
break;
case 10:return 23;
break;
case 11:return 24;
break;
case 12:return 25;
break;
case 13:return 26;
break;
case 14:return 38;
break;
case 15:return 45;
break;
case 16:return 45;
break;
case 17:return 53;
break;
case 18:return 48;
break;
case 19:return 50;
break;
case 20:return 58;
break;
case 21:return 60;
break;
case 22:return '^';
break;
case 23:return 64;
break;
case 24:return 85;
break;
case 25:return 70;
break;
case 26:return 71;
break;
case 27:return 86;
break;
case 28:return 88;
break;
case 29:return 69;
break;
case 30:return 74;
break;
case 31:return 75;
break;
case 32:return 76;
break;
case 33:return 77;
break;
case 34:return 78;
break;
case 35:return 79;
break;
case 36:return 82;
break;
case 37:return 83;
break;
case 38:return 84;
break;
case 39:return 80;
break;
case 40:return 81;
break;
case 41:return 81;
break;
case 42:return 33;
break;
case 43:return 33;
break;
case 44:return 36;
break;
case 45:return 36;
break;
case 46:return 37;
break;
case 47:return 37;
break;
case 48:return 34;
break;
case 49:return 34;
break;
case 50:return 32;
break;
case 51:return 31;
break;
case 52:return 35;
break;
case 53:return 39;
break;
case 54:return 40;
break;
case 55:return 41;
break;
case 56:return 5;
break;
case 57:return 89;
break;
case 58:return 89;
break;
case 59:return 42;
break;
case 60:return 43;
break;
case 61:return 90;
break;
case 62:return 92;
break;
case 63:return 91;
break;
case 64:return 93;
break;
case 65:return 94;
break;
case 66:return 57;
break;
case 67:return 95;
break;
case 68:return 96;
break;
case 69:return 97;
break;
case 70:return 98;
break;
case 71:return 29;
break;
case 72:return 29;
break;
case 73:return 30;
break;
case 74:return 44;
break;
case 75:return 28;
break;
case 76:return 27;
break;
case 77:return 66
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:\/\*[\w\W]*?\*\/)/,/^(?:set\b)/,/^(?:w\b)/,/^(?:weight\b)/,/^(?:md\b)/,/^(?:maxdepth\b)/,/^(?:maxobjects\b)/,/^(?:minsize\b)/,/^(?:maxsize\b)/,/^(?:seed\b)/,/^(?:initial\b)/,/^(?:background\b)/,/^(?:colorpool\b)/,/^(?:rule\b)/,/^(?:Rule\b)/,/^(?:>)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\^)/,/^(?:\*)/,/^(?:\/)/,/^(?:\+)/,/^(?:-)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:x\b)/,/^(?:y\b)/,/^(?:z\b)/,/^(?:rx\b)/,/^(?:ry\b)/,/^(?:rz\b)/,/^(?:fx\b)/,/^(?:fy\b)/,/^(?:fz\b)/,/^(?:s\b)/,/^(?:m\b)/,/^(?:matrix\b)/,/^(?:hue\b)/,/^(?:h\b)/,/^(?:saturation\b)/,/^(?:sat\b)/,/^(?:brightness\b)/,/^(?:b\b)/,/^(?:alpha\b)/,/^(?:a\b)/,/^(?:color\b)/,/^(?:random\b)/,/^(?:blend\b)/,/^(?:randomhue\b)/,/^(?:randomrgb\b)/,/^(?:greyscale\b)/,/^(?:$)/,/^(?:[0-9]+(\.[0-9]*)?)/,/^(?:\.[0-9]+)/,/^(?:list:[\w,#]+)/,/^(?:image:[\w\.\w]+)/,/^(?:box\b)/,/^(?:grid\b)/,/^(?:sphere\b)/,/^(?:line\b)/,/^(?:point\b)/,/^(?:triangle\b)/,/^(?:mesh\b)/,/^(?:cylinder\b)/,/^(?:tube\b)/,/^(?:squash\b)/,/^(?:(aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgrey|darkgreen|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|grey|green|greenyellow|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgrey|lightgreen|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|rebeccapurple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen))/,/^(?:(ALICEBLUE|ANTIQUEWHITE|AQUA|AQUAMARINE|AZURE|BEIGE|BISQUE|BLACK|BLANCHEDALMOND|BLUE|BLUEVIOLET|BROWN|BURLYWOOD|CADETBLUE|CHARTREUSE|CHOCOLATE|CORAL|CORNFLOWERBLUE|CORNSILK|CRIMSON|CYAN|DARKBLUE|DARKCYAN|DARKGOLDENROD|DARKGRAY|DARKGREY|DARKGREEN|DARKKHAKI|DARKMAGENTA|DARKOLIVEGREEN|DARKORANGE|DARKORCHID|DARKRED|DARKSALMON|DARKSEAGREEN|DARKSLATEBLUE|DARKSLATEGRAY|DARKSLATEGREY|DARKTURQUOISE|DARKVIOLET|DEEPPINK|DEEPSKYBLUE|DIMGRAY|DIMGREY|DODGERBLUE|FIREBRICK|FLORALWHITE|FORESTGREEN|FUCHSIA|GAINSBORO|GHOSTWHITE|GOLD|GOLDENROD|GRAY|GREY|GREEN|GREENYELLOW|HONEYDEW|HOTPINK|INDIANRED|INDIGO|IVORY|KHAKI|LAVENDER|LAVENDERBLUSH|LAWNGREEN|LEMONCHIFFON|LIGHTBLUE|LIGHTCORAL|LIGHTCYAN|LIGHTGOLDENRODYELLOW|LIGHTGRAY|LIGHTGREY|LIGHTGREEN|LIGHTPINK|LIGHTSALMON|LIGHTSEAGREEN|LIGHTSKYBLUE|LIGHTSLATEGRAY|LIGHTSLATEGREY|LIGHTSTEELBLUE|LIGHTYELLOW|LIME|LIMEGREEN|LINEN|MAGENTA|MAROON|MEDIUMAQUAMARINE|MEDIUMBLUE|MEDIUMORCHID|MEDIUMPURPLE|MEDIUMSEAGREEN|MEDIUMSLATEBLUE|MEDIUMSPRINGGREEN|MEDIUMTURQUOISE|MEDIUMVIOLETRED|MIDNIGHTBLUE|MINTCREAM|MISTYROSE|MOCCASIN|NAVAJOWHITE|NAVY|OLDLACE|OLIVE|OLIVEDRAB|ORANGE|ORANGERED|ORCHID|PALEGOLDENROD|PALEGREEN|PALETURQUOISE|PALEVIOLETRED|PAPAYAWHIP|PEACHPUFF|PERU|PINK|PLUM|POWDERBLUE|PURPLE|REBECCAPURPLE|RED|ROSYBROWN|ROYALBLUE|SADDLEBROWN|SALMON|SANDYBROWN|SEAGREEN|SEASHELL|SIENNA|SILVER|SKYBLUE|SLATEBLUE|SLATEGRAY|SLATEGREY|SNOW|SPRINGGREEN|STEELBLUE|TAN|TEAL|THISTLE|TOMATO|TURQUOISE|VIOLET|WHEAT|WHITE|WHITESMOKE|YELLOW|YELLOWGREEN))/,/^(?:[a-zA-Z_]+[a-zA-Z0-9_]*)/,/^(?:#define\b)/,/^(?:#[a-fA-F0-9]{6})/,/^(?:#[a-fA-F0-9]{3})/,/^(?:;)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}