/* parser generated by jison 0.4.6 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"eisenscript":3,"lines":4,"EOF":5,"line":6,"maxdepth":7,"maxobjects":8,"minsize":9,"maxsize":10,"seed":11,"background":12,"color":13,"colorpool":14,"rule":15,"statement":16,"SET":17,"MAXDEPTH":18,"num":19,"MAXOBJECTS":20,"MINSIZE":21,"MAXSIZE":22,"SEED":23,"INITIAL":24,"BACKGROUND":25,"COLOR3":26,"COLOR6":27,"STRING":28,"RANDOM":29,"COLOR":30,"HUE":31,"ALPHA":32,"BLEND":33,"SATURATION":34,"BRIGHTNESS":35,"COLORPOOL":36,"RANDOMHUE":37,"RANDOMRGB":38,"GREYSCALE":39,"COLORLIST":40,"IMAGE":41,"RULE":42,"id":43,"modifiers":44,"{":45,"statements":46,"}":47,"modifier":48,"WEIGHT":49,">":50,"rulename":51,"transformation_loops":52,"transformation_loop":53,"transformations":54,"n":55,"*":56,"transformation":57,"geo":58,"XSHIFT":59,"YSHIFT":60,"ZSHIFT":61,"ROTATEX":62,"ROTATEY":63,"ROTATEZ":64,"SIZE":65,"MATRIX":66,"+":67,"-":68,"(":69,"e":70,")":71,"NUMBER":72,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",17:"SET",18:"MAXDEPTH",20:"MAXOBJECTS",21:"MINSIZE",22:"MAXSIZE",23:"SEED",24:"INITIAL",25:"BACKGROUND",26:"COLOR3",27:"COLOR6",28:"STRING",29:"RANDOM",30:"COLOR",31:"HUE",32:"ALPHA",33:"BLEND",34:"SATURATION",35:"BRIGHTNESS",36:"COLORPOOL",37:"RANDOMHUE",38:"RANDOMRGB",39:"GREYSCALE",40:"COLORLIST",41:"IMAGE",42:"RULE",45:"{",47:"}",49:"WEIGHT",50:">",56:"*",59:"XSHIFT",60:"YSHIFT",61:"ZSHIFT",62:"ROTATEX",63:"ROTATEY",64:"ROTATEZ",65:"SIZE",66:"MATRIX",67:"+",68:"-",69:"(",70:"e",71:")",72:"NUMBER"},
productions_: [0,[3,2],[4,2],[4,0],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,3],[8,3],[9,3],[10,3],[11,3],[11,3],[12,3],[12,3],[12,3],[12,3],[13,3],[13,2],[13,2],[13,2],[13,2],[13,2],[13,2],[13,3],[13,3],[13,3],[13,3],[13,2],[13,2],[14,3],[14,3],[14,3],[14,3],[14,3],[15,6],[44,2],[44,0],[48,2],[48,2],[48,4],[46,2],[46,0],[16,2],[52,2],[52,0],[53,3],[53,5],[54,2],[54,0],[57,1],[57,1],[58,2],[58,2],[58,2],[58,2],[58,2],[58,2],[58,2],[58,4],[58,10],[19,1],[19,2],[19,2],[19,3],[55,1],[43,1],[51,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: this.$ = $$[$0-1]; return this.$; 
break;
case 2: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: this.$ = []; 
break;
case 4: this.$ = $$[$0]; 
break;
case 5: this.$ = $$[$0]; 
break;
case 6: this.$ = $$[$0]; 
break;
case 7: this.$ = $$[$0]; 
break;
case 8: this.$ = $$[$0]; 
break;
case 9: this.$ = $$[$0]; 
break;
case 10: this.$ = $$[$0]; 
break;
case 11: this.$ = $$[$0]; 
break;
case 13: this.$ = $$[$0]; $$[$0].init = true; 
break;
case 14: this.$ = { type: 'SET', name: 'MAXDEPTH', value: $$[$0] }; 
break;
case 15: this.$ = { type: 'SET', name: 'MAXOBJECTS', value: $$[$0] }; 
break;
case 16: this.$ = { type: 'SET', name: 'MINSIZE', value: $$[$0] }; 
break;
case 17: this.$ = { type: 'SET', name: 'MAXSIZE', value: $$[$0] }; 
break;
case 18: this.$ = { type: 'SET', name: 'SEED', value: $$[$0] }; 
break;
case 19: this.$ = { type: 'SET', name: 'SEED', value: $$[$0] }; 
break;
case 20: this.$ = { type: 'SET', name: 'BACKGROUND', value: $$[$0] }; 
break;
case 21: this.$ = { type: 'SET', name: 'BACKGROUND', value: $$[$0] }; 
break;
case 22: this.$ = { type: 'SET', name: 'BACKGROUND', value: $$[$0] }; 
break;
case 23: this.$ = { type: 'SET', name: 'BACKGROUND', value: $$[$0] }; 
break;
case 24: this.$ = { type: 'SET', name: 'COLOR', value: $$[$0] }; 
break;
case 25: this.$ = { name: 'HUE', value: $$[$0] }; 
break;
case 26: this.$ = { name: 'ALPHA', value: $$[$0] }; 
break;
case 27: this.$ = { name: 'COLOR', value: $$[$0] }; 
break;
case 28: this.$ = { name: 'COLOR', value: $$[$0] }; 
break;
case 29: this.$ = { name: 'COLOR', value: $$[$0] }; 
break;
case 30: this.$ = { name: 'COLOR', value: $$[$0] }; 
break;
case 31: this.$ = { name: 'BLEND', color: $$[$0-1], strength: $$[$0] }; 
break;
case 32: this.$ = { name: 'BLEND', color: $$[$0-1], strength: $$[$0] }; 
break;
case 33: this.$ = { name: 'BLEND', color: $$[$0-1], strength: $$[$0] }; 
break;
case 34: this.$ = { name: 'BLEND', color: $$[$0-1], strength: $$[$0] }; 
break;
case 35: this.$ = { name: 'SATURATION', value: $$[$0] }; 
break;
case 36: this.$ = { name: 'BRIGHTNESS', value: $$[$0] }; 
break;
case 37: this.$ = { type: 'SET', name: 'COLORPOOL', value: $$[$0] }; 
break;
case 38: this.$ = { type: 'SET', name: 'COLORPOOL', value: $$[$0] }; 
break;
case 39: this.$ = { type: 'SET', name: 'COLORPOOL', value: $$[$0] }; 
break;
case 40: this.$ = { type: 'SET', name: 'COLORPOOL', value: $$[$0] }; 
break;
case 41: this.$ = { type: 'SET', name: 'COLORPOOL', value: $$[$0] }; 
break;
case 42: this.$ = { type: 'RULE', id: $$[$0-4], modifiers: $$[$0-3], body: $$[$0-1] }; 
break;
case 43: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 44: this.$ = []; 
break;
case 45: this.$ = { name: 'WEIGHT',   value: $$[$0] }; 
break;
case 46: this.$ = { name: 'MAXDEPTH', value: $$[$0] }; 
break;
case 47: this.$ = { name: 'MAXDEPTH', value: $$[$0-2], alternate: $$[$0]}; 
break;
case 48: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 49: this.$ = []; 
break;
case 50: this.$ = { type: 'STATEMENT', id: $$[$0], loop: $$[$0-1] }; 
break;
case 51: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 52: this.$ = []; 
break;
case 53: this.$ = { iter:  1, attr: $$[$0-1] }; 
break;
case 54: this.$ = { iter: $$[$0-4], attr: $$[$0-1] }; 
break;
case 55: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 56: this.$ = []; 
break;
case 59: this.$ = { name: 'XSHIFT', value: $$[$0] }; 
break;
case 60: this.$ = { name: 'YSHIFT', value: $$[$0] }; 
break;
case 61: this.$ = { name: 'ZSHIFT', value: $$[$0] }; 
break;
case 62: this.$ = { name: 'ROTATEX', value: $$[$0] }; 
break;
case 63: this.$ = { name: 'ROTATEY', value: $$[$0] }; 
break;
case 64: this.$ = { name: 'ROTATEZ', value: $$[$0] }; 
break;
case 65: this.$ = { name: 'SIZE', value: [$$[$0], $$[$0], $$[$0]] }; 
break;
case 66: this.$ = { name: 'SIZE', value: [$$[$0-2], $$[$0-1], $$[$0]] }; 
break;
case 67: this.$ = { name: 'MATRIX', value: [$$[$0-8], $$[$0-7], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]] }; 
break;
case 69: this.$ =  $$[$0]; 
break;
case 70: this.$ = -$$[$0]; 
break;
case 71: this.$ =  $$[$0-1]; 
break;
case 72: this.$ = parseFloat(yytext); 
break;
case 73: this.$ = yytext; 
break;
case 74:this.$ = $$[$0]; 
break;
}
},
table: [{3:1,4:2,5:[2,3],17:[2,3],28:[2,3],30:[2,3],31:[2,3],32:[2,3],33:[2,3],34:[2,3],35:[2,3],42:[2,3],45:[2,3],72:[2,3]},{1:[3]},{5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:[1,15],28:[2,52],30:[1,18],31:[1,16],32:[1,17],33:[1,19],34:[1,20],35:[1,21],42:[1,22],45:[2,52],52:23,72:[2,52]},{1:[2,1]},{5:[2,2],17:[2,2],28:[2,2],30:[2,2],31:[2,2],32:[2,2],33:[2,2],34:[2,2],35:[2,2],42:[2,2],45:[2,2],72:[2,2]},{5:[2,4],17:[2,4],28:[2,4],30:[2,4],31:[2,4],32:[2,4],33:[2,4],34:[2,4],35:[2,4],42:[2,4],45:[2,4],72:[2,4]},{5:[2,5],17:[2,5],28:[2,5],30:[2,5],31:[2,5],32:[2,5],33:[2,5],34:[2,5],35:[2,5],42:[2,5],45:[2,5],72:[2,5]},{5:[2,6],17:[2,6],28:[2,6],30:[2,6],31:[2,6],32:[2,6],33:[2,6],34:[2,6],35:[2,6],42:[2,6],45:[2,6],72:[2,6]},{5:[2,7],17:[2,7],28:[2,7],30:[2,7],31:[2,7],32:[2,7],33:[2,7],34:[2,7],35:[2,7],42:[2,7],45:[2,7],72:[2,7]},{5:[2,8],17:[2,8],28:[2,8],30:[2,8],31:[2,8],32:[2,8],33:[2,8],34:[2,8],35:[2,8],42:[2,8],45:[2,8],72:[2,8]},{5:[2,9],17:[2,9],28:[2,9],30:[2,9],31:[2,9],32:[2,9],33:[2,9],34:[2,9],35:[2,9],42:[2,9],45:[2,9],72:[2,9]},{5:[2,10],17:[2,10],28:[2,10],30:[2,10],31:[2,10],32:[2,10],33:[2,10],34:[2,10],35:[2,10],42:[2,10],45:[2,10],72:[2,10]},{5:[2,11],17:[2,11],28:[2,11],30:[2,11],31:[2,11],32:[2,11],33:[2,11],34:[2,11],35:[2,11],42:[2,11],45:[2,11],72:[2,11]},{5:[2,12],17:[2,12],28:[2,12],30:[2,12],31:[2,12],32:[2,12],33:[2,12],34:[2,12],35:[2,12],42:[2,12],45:[2,12],72:[2,12]},{5:[2,13],17:[2,13],28:[2,13],30:[2,13],31:[2,13],32:[2,13],33:[2,13],34:[2,13],35:[2,13],42:[2,13],45:[2,13],72:[2,13]},{18:[1,24],20:[1,25],21:[1,26],22:[1,27],23:[1,28],25:[1,29],30:[1,30],36:[1,31]},{19:32,55:33,67:[1,34],68:[1,35],69:[1,36],72:[1,37]},{19:38,55:33,67:[1,34],68:[1,35],69:[1,36],72:[1,37]},{26:[1,39],27:[1,40],28:[1,42],29:[1,41]},{26:[1,43],27:[1,44],28:[1,46],29:[1,45]},{19:47,55:33,67:[1,34],68:[1,35],69:[1,36],72:[1,37]},{19:48,55:33,67:[1,34],68:[1,35],69:[1,36],72:[1,37]},{28:[1,50],43:49},{28:[1,50],43:51,45:[1,53],53:52,55:54,72:[1,37]},{19:55,55:33,67:[1,34],68:[1,35],69:[1,36],72:[1,37]},{19:56,55:33,67:[1,34],68:[1,35],69:[1,36],72:[1,37]},{19:57,55:33,67:[1,34],68:[1,35],69:[1,36],72:[1,37]},{19:58,55:33,67:[1,34],68:[1,35],69:[1,36],72:[1,37]},{19:59,24:[1,60],55:33,67:[1,34],68:[1,35],69:[1,36],72:[1,37]},{26:[1,61],27:[1,62],28:[1,63],29:[1,64]},{29:[1,65]},{37:[1,66],38:[1,67],39:[1,68],40:[1,69],41:[1,70]},{5:[2,25],17:[2,25],28:[2,25],30:[2,25],31:[2,25],32:[2,25],33:[2,25],34:[2,25],35:[2,25],42:[2,25],45:[2,25],47:[2,25],59:[2,25],60:[2,25],61:[2,25],62:[2,25],63:[2,25],64:[2,25],65:[2,25],66:[2,25],72:[2,25]},{5:[2,68],17:[2,68],18:[2,68],28:[2,68],30:[2,68],31:[2,68],32:[2,68],33:[2,68],34:[2,68],35:[2,68],42:[2,68],45:[2,68],47:[2,68],49:[2,68],50:[2,68],59:[2,68],60:[2,68],61:[2,68],62:[2,68],63:[2,68],64:[2,68],65:[2,68],66:[2,68],67:[2,68],68:[2,68],69:[2,68],72:[2,68]},{55:71,72:[1,37]},{55:72,72:[1,37]},{70:[1,73]},{5:[2,72],17:[2,72],18:[2,72],28:[2,72],30:[2,72],31:[2,72],32:[2,72],33:[2,72],34:[2,72],35:[2,72],42:[2,72],45:[2,72],47:[2,72],49:[2,72],50:[2,72],56:[2,72],59:[2,72],60:[2,72],61:[2,72],62:[2,72],63:[2,72],64:[2,72],65:[2,72],66:[2,72],67:[2,72],68:[2,72],69:[2,72],72:[2,72]},{5:[2,26],17:[2,26],28:[2,26],30:[2,26],31:[2,26],32:[2,26],33:[2,26],34:[2,26],35:[2,26],42:[2,26],45:[2,26],47:[2,26],59:[2,26],60:[2,26],61:[2,26],62:[2,26],63:[2,26],64:[2,26],65:[2,26],66:[2,26],72:[2,26]},{5:[2,27],17:[2,27],28:[2,27],30:[2,27],31:[2,27],32:[2,27],33:[2,27],34:[2,27],35:[2,27],42:[2,27],45:[2,27],47:[2,27],59:[2,27],60:[2,27],61:[2,27],62:[2,27],63:[2,27],64:[2,27],65:[2,27],66:[2,27],72:[2,27]},{5:[2,28],17:[2,28],28:[2,28],30:[2,28],31:[2,28],32:[2,28],33:[2,28],34:[2,28],35:[2,28],42:[2,28],45:[2,28],47:[2,28],59:[2,28],60:[2,28],61:[2,28],62:[2,28],63:[2,28],64:[2,28],65:[2,28],66:[2,28],72:[2,28]},{5:[2,29],17:[2,29],28:[2,29],30:[2,29],31:[2,29],32:[2,29],33:[2,29],34:[2,29],35:[2,29],42:[2,29],45:[2,29],47:[2,29],59:[2,29],60:[2,29],61:[2,29],62:[2,29],63:[2,29],64:[2,29],65:[2,29],66:[2,29],72:[2,29]},{5:[2,30],17:[2,30],28:[2,30],30:[2,30],31:[2,30],32:[2,30],33:[2,30],34:[2,30],35:[2,30],42:[2,30],45:[2,30],47:[2,30],59:[2,30],60:[2,30],61:[2,30],62:[2,30],63:[2,30],64:[2,30],65:[2,30],66:[2,30],72:[2,30]},{19:74,55:33,67:[1,34],68:[1,35],69:[1,36],72:[1,37]},{19:75,55:33,67:[1,34],68:[1,35],69:[1,36],72:[1,37]},{19:76,55:33,67:[1,34],68:[1,35],69:[1,36],72:[1,37]},{19:77,55:33,67:[1,34],68:[1,35],69:[1,36],72:[1,37]},{5:[2,35],17:[2,35],28:[2,35],30:[2,35],31:[2,35],32:[2,35],33:[2,35],34:[2,35],35:[2,35],42:[2,35],45:[2,35],47:[2,35],59:[2,35],60:[2,35],61:[2,35],62:[2,35],63:[2,35],64:[2,35],65:[2,35],66:[2,35],72:[2,35]},{5:[2,36],17:[2,36],28:[2,36],30:[2,36],31:[2,36],32:[2,36],33:[2,36],34:[2,36],35:[2,36],42:[2,36],45:[2,36],47:[2,36],59:[2,36],60:[2,36],61:[2,36],62:[2,36],63:[2,36],64:[2,36],65:[2,36],66:[2,36],72:[2,36]},{18:[2,44],44:78,45:[2,44],49:[2,44]},{5:[2,73],17:[2,73],18:[2,73],28:[2,73],30:[2,73],31:[2,73],32:[2,73],33:[2,73],34:[2,73],35:[2,73],42:[2,73],45:[2,73],47:[2,73],49:[2,73],72:[2,73]},{5:[2,50],17:[2,50],28:[2,50],30:[2,50],31:[2,50],32:[2,50],33:[2,50],34:[2,50],35:[2,50],42:[2,50],45:[2,50],47:[2,50],72:[2,50]},{28:[2,51],45:[2,51],72:[2,51]},{17:[2,56],30:[2,56],31:[2,56],32:[2,56],33:[2,56],34:[2,56],35:[2,56],47:[2,56],54:79,59:[2,56],60:[2,56],61:[2,56],62:[2,56],63:[2,56],64:[2,56],65:[2,56],66:[2,56]},{56:[1,80]},{5:[2,14],17:[2,14],28:[2,14],30:[2,14],31:[2,14],32:[2,14],33:[2,14],34:[2,14],35:[2,14],42:[2,14],45:[2,14],72:[2,14]},{5:[2,15],17:[2,15],28:[2,15],30:[2,15],31:[2,15],32:[2,15],33:[2,15],34:[2,15],35:[2,15],42:[2,15],45:[2,15],72:[2,15]},{5:[2,16],17:[2,16],28:[2,16],30:[2,16],31:[2,16],32:[2,16],33:[2,16],34:[2,16],35:[2,16],42:[2,16],45:[2,16],72:[2,16]},{5:[2,17],17:[2,17],28:[2,17],30:[2,17],31:[2,17],32:[2,17],33:[2,17],34:[2,17],35:[2,17],42:[2,17],45:[2,17],72:[2,17]},{5:[2,18],17:[2,18],28:[2,18],30:[2,18],31:[2,18],32:[2,18],33:[2,18],34:[2,18],35:[2,18],42:[2,18],45:[2,18],72:[2,18]},{5:[2,19],17:[2,19],28:[2,19],30:[2,19],31:[2,19],32:[2,19],33:[2,19],34:[2,19],35:[2,19],42:[2,19],45:[2,19],72:[2,19]},{5:[2,20],17:[2,20],28:[2,20],30:[2,20],31:[2,20],32:[2,20],33:[2,20],34:[2,20],35:[2,20],42:[2,20],45:[2,20],72:[2,20]},{5:[2,21],17:[2,21],28:[2,21],30:[2,21],31:[2,21],32:[2,21],33:[2,21],34:[2,21],35:[2,21],42:[2,21],45:[2,21],72:[2,21]},{5:[2,22],17:[2,22],28:[2,22],30:[2,22],31:[2,22],32:[2,22],33:[2,22],34:[2,22],35:[2,22],42:[2,22],45:[2,22],72:[2,22]},{5:[2,23],17:[2,23],28:[2,23],30:[2,23],31:[2,23],32:[2,23],33:[2,23],34:[2,23],35:[2,23],42:[2,23],45:[2,23],72:[2,23]},{5:[2,24],17:[2,24],28:[2,24],30:[2,24],31:[2,24],32:[2,24],33:[2,24],34:[2,24],35:[2,24],42:[2,24],45:[2,24],47:[2,24],59:[2,24],60:[2,24],61:[2,24],62:[2,24],63:[2,24],64:[2,24],65:[2,24],66:[2,24],72:[2,24]},{5:[2,37],17:[2,37],28:[2,37],30:[2,37],31:[2,37],32:[2,37],33:[2,37],34:[2,37],35:[2,37],42:[2,37],45:[2,37],72:[2,37]},{5:[2,38],17:[2,38],28:[2,38],30:[2,38],31:[2,38],32:[2,38],33:[2,38],34:[2,38],35:[2,38],42:[2,38],45:[2,38],72:[2,38]},{5:[2,39],17:[2,39],28:[2,39],30:[2,39],31:[2,39],32:[2,39],33:[2,39],34:[2,39],35:[2,39],42:[2,39],45:[2,39],72:[2,39]},{5:[2,40],17:[2,40],28:[2,40],30:[2,40],31:[2,40],32:[2,40],33:[2,40],34:[2,40],35:[2,40],42:[2,40],45:[2,40],72:[2,40]},{5:[2,41],17:[2,41],28:[2,41],30:[2,41],31:[2,41],32:[2,41],33:[2,41],34:[2,41],35:[2,41],42:[2,41],45:[2,41],72:[2,41]},{5:[2,69],17:[2,69],18:[2,69],28:[2,69],30:[2,69],31:[2,69],32:[2,69],33:[2,69],34:[2,69],35:[2,69],42:[2,69],45:[2,69],47:[2,69],49:[2,69],50:[2,69],59:[2,69],60:[2,69],61:[2,69],62:[2,69],63:[2,69],64:[2,69],65:[2,69],66:[2,69],67:[2,69],68:[2,69],69:[2,69],72:[2,69]},{5:[2,70],17:[2,70],18:[2,70],28:[2,70],30:[2,70],31:[2,70],32:[2,70],33:[2,70],34:[2,70],35:[2,70],42:[2,70],45:[2,70],47:[2,70],49:[2,70],50:[2,70],59:[2,70],60:[2,70],61:[2,70],62:[2,70],63:[2,70],64:[2,70],65:[2,70],66:[2,70],67:[2,70],68:[2,70],69:[2,70],72:[2,70]},{71:[1,81]},{5:[2,31],17:[2,31],28:[2,31],30:[2,31],31:[2,31],32:[2,31],33:[2,31],34:[2,31],35:[2,31],42:[2,31],45:[2,31],47:[2,31],59:[2,31],60:[2,31],61:[2,31],62:[2,31],63:[2,31],64:[2,31],65:[2,31],66:[2,31],72:[2,31]},{5:[2,32],17:[2,32],28:[2,32],30:[2,32],31:[2,32],32:[2,32],33:[2,32],34:[2,32],35:[2,32],42:[2,32],45:[2,32],47:[2,32],59:[2,32],60:[2,32],61:[2,32],62:[2,32],63:[2,32],64:[2,32],65:[2,32],66:[2,32],72:[2,32]},{5:[2,33],17:[2,33],28:[2,33],30:[2,33],31:[2,33],32:[2,33],33:[2,33],34:[2,33],35:[2,33],42:[2,33],45:[2,33],47:[2,33],59:[2,33],60:[2,33],61:[2,33],62:[2,33],63:[2,33],64:[2,33],65:[2,33],66:[2,33],72:[2,33]},{5:[2,34],17:[2,34],28:[2,34],30:[2,34],31:[2,34],32:[2,34],33:[2,34],34:[2,34],35:[2,34],42:[2,34],45:[2,34],47:[2,34],59:[2,34],60:[2,34],61:[2,34],62:[2,34],63:[2,34],64:[2,34],65:[2,34],66:[2,34],72:[2,34]},{18:[1,85],45:[1,82],48:83,49:[1,84]},{13:89,17:[1,98],30:[1,18],31:[1,16],32:[1,17],33:[1,19],34:[1,20],35:[1,21],47:[1,86],57:87,58:88,59:[1,90],60:[1,91],61:[1,92],62:[1,93],63:[1,94],64:[1,95],65:[1,96],66:[1,97]},{45:[1,99]},{5:[2,71],17:[2,71],18:[2,71],28:[2,71],30:[2,71],31:[2,71],32:[2,71],33:[2,71],34:[2,71],35:[2,71],42:[2,71],45:[2,71],47:[2,71],49:[2,71],50:[2,71],59:[2,71],60:[2,71],61:[2,71],62:[2,71],63:[2,71],64:[2,71],65:[2,71],66:[2,71],67:[2,71],68:[2,71],69:[2,71],72:[2,71]},{28:[2,49],45:[2,49],46:100,47:[2,49],72:[2,49]},{18:[2,43],45:[2,43],49:[2,43]},{19:101,55:33,67:[1,34],68:[1,35],69:[1,36],72:[1,37]},{19:102,55:33,67:[1,34],68:[1,35],69:[1,36],72:[1,37]},{28:[2,53],45:[2,53],72:[2,53]},{17:[2,55],30:[2,55],31:[2,55],32:[2,55],33:[2,55],34:[2,55],35:[2,55],47:[2,55],59:[2,55],60:[2,55],61:[2,55],62:[2,55],63:[2,55],64:[2,55],65:[2,55],66:[2,55]},{17:[2,57],30:[2,57],31:[2,57],32:[2,57],33:[2,57],34:[2,57],35:[2,57],47:[2,57],59:[2,57],60:[2,57],61:[2,57],62:[2,57],63:[2,57],64:[2,57],65:[2,57],66:[2,57]},{17:[2,58],30:[2,58],31:[2,58],32:[2,58],33:[2,58],34:[2,58],35:[2,58],47:[2,58],59:[2,58],60:[2,58],61:[2,58],62:[2,58],63:[2,58],64:[2,58],65:[2,58],66:[2,58]},{19:103,55:33,67:[1,34],68:[1,35],69:[1,36],72:[1,37]},{19:104,55:33,67:[1,34],68:[1,35],69:[1,36],72:[1,37]},{19:105,55:33,67:[1,34],68:[1,35],69:[1,36],72:[1,37]},{19:106,55:33,67:[1,34],68:[1,35],69:[1,36],72:[1,37]},{19:107,55:33,67:[1,34],68:[1,35],69:[1,36],72:[1,37]},{19:108,55:33,67:[1,34],68:[1,35],69:[1,36],72:[1,37]},{19:109,55:33,67:[1,34],68:[1,35],69:[1,36],72:[1,37]},{19:110,55:33,67:[1,34],68:[1,35],69:[1,36],72:[1,37]},{30:[1,30]},{17:[2,56],30:[2,56],31:[2,56],32:[2,56],33:[2,56],34:[2,56],35:[2,56],47:[2,56],54:111,59:[2,56],60:[2,56],61:[2,56],62:[2,56],63:[2,56],64:[2,56],65:[2,56],66:[2,56]},{16:113,28:[2,52],45:[2,52],47:[1,112],52:23,72:[2,52]},{18:[2,45],45:[2,45],49:[2,45]},{18:[2,46],45:[2,46],49:[2,46],50:[1,114]},{17:[2,59],30:[2,59],31:[2,59],32:[2,59],33:[2,59],34:[2,59],35:[2,59],47:[2,59],59:[2,59],60:[2,59],61:[2,59],62:[2,59],63:[2,59],64:[2,59],65:[2,59],66:[2,59]},{17:[2,60],30:[2,60],31:[2,60],32:[2,60],33:[2,60],34:[2,60],35:[2,60],47:[2,60],59:[2,60],60:[2,60],61:[2,60],62:[2,60],63:[2,60],64:[2,60],65:[2,60],66:[2,60]},{17:[2,61],30:[2,61],31:[2,61],32:[2,61],33:[2,61],34:[2,61],35:[2,61],47:[2,61],59:[2,61],60:[2,61],61:[2,61],62:[2,61],63:[2,61],64:[2,61],65:[2,61],66:[2,61]},{17:[2,62],30:[2,62],31:[2,62],32:[2,62],33:[2,62],34:[2,62],35:[2,62],47:[2,62],59:[2,62],60:[2,62],61:[2,62],62:[2,62],63:[2,62],64:[2,62],65:[2,62],66:[2,62]},{17:[2,63],30:[2,63],31:[2,63],32:[2,63],33:[2,63],34:[2,63],35:[2,63],47:[2,63],59:[2,63],60:[2,63],61:[2,63],62:[2,63],63:[2,63],64:[2,63],65:[2,63],66:[2,63]},{17:[2,64],30:[2,64],31:[2,64],32:[2,64],33:[2,64],34:[2,64],35:[2,64],47:[2,64],59:[2,64],60:[2,64],61:[2,64],62:[2,64],63:[2,64],64:[2,64],65:[2,64],66:[2,64]},{17:[2,65],19:115,30:[2,65],31:[2,65],32:[2,65],33:[2,65],34:[2,65],35:[2,65],47:[2,65],55:33,59:[2,65],60:[2,65],61:[2,65],62:[2,65],63:[2,65],64:[2,65],65:[2,65],66:[2,65],67:[1,34],68:[1,35],69:[1,36],72:[1,37]},{19:116,55:33,67:[1,34],68:[1,35],69:[1,36],72:[1,37]},{13:89,17:[1,98],30:[1,18],31:[1,16],32:[1,17],33:[1,19],34:[1,20],35:[1,21],47:[1,117],57:87,58:88,59:[1,90],60:[1,91],61:[1,92],62:[1,93],63:[1,94],64:[1,95],65:[1,96],66:[1,97]},{5:[2,42],17:[2,42],28:[2,42],30:[2,42],31:[2,42],32:[2,42],33:[2,42],34:[2,42],35:[2,42],42:[2,42],45:[2,42],72:[2,42]},{28:[2,48],45:[2,48],47:[2,48],72:[2,48]},{28:[1,119],51:118},{19:120,55:33,67:[1,34],68:[1,35],69:[1,36],72:[1,37]},{19:121,55:33,67:[1,34],68:[1,35],69:[1,36],72:[1,37]},{28:[2,54],45:[2,54],72:[2,54]},{18:[2,47],45:[2,47],49:[2,47]},{18:[2,74],45:[2,74],49:[2,74]},{17:[2,66],30:[2,66],31:[2,66],32:[2,66],33:[2,66],34:[2,66],35:[2,66],47:[2,66],59:[2,66],60:[2,66],61:[2,66],62:[2,66],63:[2,66],64:[2,66],65:[2,66],66:[2,66]},{19:122,55:33,67:[1,34],68:[1,35],69:[1,36],72:[1,37]},{19:123,55:33,67:[1,34],68:[1,35],69:[1,36],72:[1,37]},{19:124,55:33,67:[1,34],68:[1,35],69:[1,36],72:[1,37]},{19:125,55:33,67:[1,34],68:[1,35],69:[1,36],72:[1,37]},{19:126,55:33,67:[1,34],68:[1,35],69:[1,36],72:[1,37]},{19:127,55:33,67:[1,34],68:[1,35],69:[1,36],72:[1,37]},{17:[2,67],30:[2,67],31:[2,67],32:[2,67],33:[2,67],34:[2,67],35:[2,67],47:[2,67],59:[2,67],60:[2,67],61:[2,67],62:[2,67],63:[2,67],64:[2,67],65:[2,67],66:[2,67]}],
defaultActions: {3:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip */
break;
case 1:/* ignore comment */
break;
case 2:/* ignore comment */
break;
case 3:return 17
break;
case 4:return 49;
break;
case 5:return 49;
break;
case 6:return 18;
break;
case 7:return 18;
break;
case 8:return 20;
break;
case 9:return 21;
break;
case 10:return 22;
break;
case 11:return 23;
break;
case 12:return 24;
break;
case 13:return 25;
break;
case 14:return 36;
break;
case 15:return 42;
break;
case 16:return 50;
break;
case 17:return 45;
break;
case 18:return 47;
break;
case 19:return '[';
break;
case 20:return ']';
break;
case 21:return '^';
break;
case 22:return 56;
break;
case 23:return '/';
break;
case 24:return 67;
break;
case 25:return 68;
break;
case 26:return 69;
break;
case 27:return 71;
break;
case 28:return ',';
break;
case 29:return 59;
break;
case 30:return 60;
break;
case 31:return 61;
break;
case 32:return 62;
break;
case 33:return 63;
break;
case 34:return 64;
break;
case 35:return 65;
break;
case 36:return 66;
break;
case 37:return 31;
break;
case 38:return 31;
break;
case 39:return 34;
break;
case 40:return 34;
break;
case 41:return 35;
break;
case 42:return 35;
break;
case 43:return 32;
break;
case 44:return 32;
break;
case 45:return 30;
break;
case 46:return 29;
break;
case 47:return 33;
break;
case 48:return 37;
break;
case 49:return 38;
break;
case 50:return 39;
break;
case 51:return 5;
break;
case 52:return 72;
break;
case 53:return 72;
break;
case 54:return 40;
break;
case 55:return 41;
break;
case 56:return 28;
break;
case 57:return 27;
break;
case 58:return 26;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:\/\*[\w\W]*?\*\/)/,/^(?:set\b)/,/^(?:w\b)/,/^(?:weight\b)/,/^(?:md\b)/,/^(?:maxdepth\b)/,/^(?:maxobjects\b)/,/^(?:minsize\b)/,/^(?:maxsize\b)/,/^(?:seed\b)/,/^(?:initial\b)/,/^(?:background\b)/,/^(?:colorpool\b)/,/^(?:rule\b)/,/^(?:>)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\^)/,/^(?:\*)/,/^(?:\/)/,/^(?:\+)/,/^(?:-)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:x\b)/,/^(?:y\b)/,/^(?:z\b)/,/^(?:rx\b)/,/^(?:ry\b)/,/^(?:rz\b)/,/^(?:s\b)/,/^(?:m\b)/,/^(?:hue\b)/,/^(?:h\b)/,/^(?:saturation\b)/,/^(?:sat\b)/,/^(?:brightness\b)/,/^(?:b\b)/,/^(?:alpha\b)/,/^(?:a\b)/,/^(?:color\b)/,/^(?:random\b)/,/^(?:blend\b)/,/^(?:randomhue\b)/,/^(?:randomrgb\b)/,/^(?:greyscale\b)/,/^(?:$)/,/^(?:[0-9]+(\.[0-9]*)?)/,/^(?:\.[0-9]+)/,/^(?:list:[\w,]+)/,/^(?:image:[\w\.\w]+)/,/^(?:[a-zA-Z_]+[a-zA-Z0-9_]*)/,/^(?:#[a-fA-F0-9]{6})/,/^(?:#[a-fA-F0-9]{3})/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}