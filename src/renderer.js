// simple renderer for testing whether it is possible to render correctly from the object code generated by interpreter
exports.TestRenderer = function(width, height, option) {
  this.name = 'TestRenderer';
  this.width = width;
  this.height = height;
  this.materialType = option.materialType || 'normal';
  this.scene = new THREE.Scene();
  this.group = new THREE.Object3D()
  
  // camera
  this.camera = new THREE.PerspectiveCamera(15, this.width / this.height, 1, 2000);
  this.camera.target = new THREE.Vector3(0, 0, 0);
  this.resetCamera().updateCamera();
  
  // geometry
  this.geometry = {
    cube: new THREE.CubeGeometry(1, 1, 1),
    sphere: new THREE.SphereGeometry(.5, 40, 32)
  }
  
  // light
  this.lights = [
    new THREE.SpotLight(0xff170f, 1),//Math.random() * 0xffffff, 2 )
    new THREE.SpotLight(0xffcf0f, 1)
  ];
  
  this.lights[0].position.set(0, 500, 2000);
  this.lights[0].castShadow = true;
  this.lights[1].position.set(0, -400, -1800);
  this.lights[1].castShadow = true;
  
  // add to scene
  this.scene.add(this.camera);
  this.scene.add(this.group);
  this.scene.add(this.lights[0]);
  this.scene.add(this.lights[1]);
  
  // renderer
  this.renderer = new THREE.WebGLRenderer({ antialias: true });
  this.domElement = this.renderer.domElement;
  
  this.resize(this.width, this.height);
};

// interpret object code and refresh stage objects
exports.TestRenderer.prototype.build = function(objects) {
  var that = this;
  objects.forEach(function(object) {
    switch (object.type) {
      case Type.Background: that.clearColor(object.color); break;
      case Type.Primitive: that.add(object); break;
    }
  });
  return this;
};

// repaint background with specific color
exports.TestRenderer.prototype.clearColor = function(hex) {
  this.renderer.setClearColor(new THREE.Color(hex), 1);
  return this;
};

// add any primitive to stage
exports.TestRenderer.prototype.add = function(params) {
  var mesh, geometry, material;
  
  switch (params.name) {
    case Primitive.Box: geometry = this.geometry.cube; break;
    case Primitive.Sphere: geometry = this.geometry.sphere; break;
    case Primitive.Grid: params.wireframe = true; geometry = this.geometry.cube; break;
  }
  
  // set transparent property for working opacity.
  // http://stackoverflow.com/questions/14609508/cant-change-opacity-anymore-when-upgrading-from-three-js-r52-to-r55
  params = _.extend(params, {
    transparent: true
  });
  
  switch (this.materialType) {
    case MaterialType.Lambert: material = new THREE.MeshLambertMaterial(params); break;
    default: material = new THREE.MeshNormalMaterial(params); break;
  }
  
  // add primitive
  mesh = new THREE.Mesh(geometry, material);
  mesh.castShadow = true;
  mesh.receiveShadow = true;
  mesh.applyMatrix(params.matrix);
  this.group.add(mesh);
  return this;
};

// remove all objects from stage
exports.TestRenderer.prototype.removeAll = function() {
  var boxes = this.group.children;
  for (var i = boxes.length - 1; i >= 0; i--) this.group.remove(boxes[i]);
}

// back to initial state
exports.TestRenderer.prototype.resetCamera = function() {
  this.lon = this.lon || 45;
  this.lonstep = this.lonstep || .5;
  this.lat = this.lat || 45;
  this.phi = this.phi || 0;
  this.theta = this.theta || 0;
  this.d = this.d || 100;
  return this;
};

// update camera position around origin
exports.TestRenderer.prototype.updateCamera = function() {
  this.lat = clamp(this.lat, -85, 85);
  this.phi = degToRad(90 - this.lat);
  this.theta = degToRad(this.lon);
  this.camera.position.x = this.d * Math.sin(this.phi) * Math.cos(this.theta);
  this.camera.position.y = this.d * Math.cos(this.phi);
  this.camera.position.z = this.d * Math.sin(this.phi) * Math.sin(this.theta);
  this.camera.lookAt(this.camera.target);
  return this;
}

// garbage collection
exports.TestRenderer.prototype.clear = function() {
  this.removeAll();
  this.renderer.render(this.scene, this.camera);
  return this;
};

// if want to resize the stage size
exports.TestRenderer.prototype.resize = function(width, height) {
  this.width = width;
  this.height = height;
  this.camera.aspect = width / height;
  this.camera.updateProjectionMatrix();
  this.renderer.setSize(width, height);
  return this;
};

// should call every frame for making the change to objects rendered on stage
// if want to rotate camera around origin that is (0, 0, 0)
exports.TestRenderer.prototype.update = function() {
  this.lon += this.lonstep;
  this.updateCamera();
  return this;
}

// rendering the scene
exports.TestRenderer.prototype.render = function() {
  this.renderer.sortObjects = false;
  this.renderer.shadowCameraFov = this.camera.fov;
  this.renderer.render(this.scene, this.camera);
  return this;
}

// save image rendered on stage with png format
exports.TestRenderer.prototype.saveImage = function() {
  window.open(this.renderer.domElement.toDataURL("image/png"));
  return this;
};