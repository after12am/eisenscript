var assert = require('chai').assert;
var sweet = require('./sweet');
var describe = sweet.describe;
var parser = require('../../src/parser');
var dump = require('./dump');

console.log('Testing ast generated by jison...'.info)
console.log('\n= Comments');
console.log('\n-----------------------------------------'.prompt);
console.log('  comments'.prompt);
console.log('-----------------------------------------'.prompt);

describe('// this is comment', function() {
  var source = '// this is comment';
  var ast = parser.parse(source);
  assert.ok(ast.length === 0);
});

describe('/* this is comment */', function() {
  var source = '/* this is comment */';
  var ast = parser.parse(source);
  assert.ok(ast.length === 0);
});

console.log('\n= Actions');
console.log('\n-----------------------------------------'.prompt);
console.log('  set maxdepth [integer]'.prompt);
console.log('-----------------------------------------'.prompt);

describe('set maxdepth 100', function() {
  var source = 'set maxdepth 100';
  var ast = parser.parse(source);
  dump(ast)
  assert.ok(ast[0].type == 'set');
  assert.ok(ast[0].key == 'maxdepth');
  assert.ok(ast[0].value == 100);
});

describe('set maxdepth ten (can not set string value on maxdepth)', function() {
  try {
    var source = 'set maxdepth ten';
    var ast = parser.parse(source);
    assert(0);
  } catch (e) {
    assert.ok(1);
  }
});

console.log('\n-----------------------------------------'.prompt);
console.log('  set maxobjects [float]'.prompt);
console.log('-----------------------------------------'.prompt);

describe('set maxobjects 100', function() {
  var source = 'set maxobjects 100';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'set');
  assert.ok(ast[0].key == 'maxobjects');
  assert.ok(ast[0].value == 100);
});

describe('set maxobjects ten (can not set string value on maxobjects)', function() {
  try {
    var source = 'set maxobjects ten';
    var ast = parser.parse(source);
    assert(0);
  } catch (e) {
    assert.ok(1);
  }
});

console.log('\n-----------------------------------------'.prompt);
console.log('  set minsize [float]'.prompt);
console.log('-----------------------------------------'.prompt);

describe('set minsize 10.1', function() {
  var source = 'set minsize 10.1';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'set');
  assert.ok(ast[0].key == 'minsize');
  assert.ok(ast[0].value == 10.1);
});

describe('set minsize 100 (can not set integer value on minsize)', function() {
  try {
    var source = 'set minsize 100';
    var ast = parser.parse(source);
    assert(0);
  } catch (e) {
    assert.ok(1);
  }
});

describe('set minsize ten (can not set string value on minsize)', function() {
  try {
    var source = 'set minsize ten';
    var ast = parser.parse(source);
    assert(0);
  } catch (e) {
    assert.ok(1);
  }
});

console.log('\n-----------------------------------------'.prompt);
console.log('  set maxsize [float]'.prompt);
console.log('-----------------------------------------'.prompt);

describe('set maxsize 10.1', function() {
  var source = 'set maxsize 10.1';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'set');
  assert.ok(ast[0].key == 'maxsize');
  assert.ok(ast[0].value == 10.1);
});

describe('set maxsize 100 (can not set integer value on maxsize)', function() {
  try {
    var source = 'set maxsize 100';
    var ast = parser.parse(source);
    assert(0);
  } catch (e) {
    assert.ok(1);
  }
});

describe('set maxsize ten (can not set string value on maxsize)', function() {
  try {
    var source = 'set maxsize ten';
    var ast = parser.parse(source);
    assert(0);
  } catch (e) {
    assert.ok(1);
  }
});

console.log('\n-----------------------------------------'.prompt);
console.log('  set seed [integer] / initial'.prompt);
console.log('-----------------------------------------'.prompt);

describe('set seed 100', function() {
  var source = 'set seed 100';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'set');
  assert.ok(ast[0].key == 'seed');
  assert.ok(ast[0].value == 100);
});

describe('set seed initial', function() {
  var source = 'set seed initial';
  var ast = parser.parse(source);
  assert.ok(1);
});

describe('set seed ten (can not set string value except initial on seed)', function() {
  try {
    var source = 'set seed ten';
    var ast = parser.parse(source);
    assert(0);
  } catch (e) {
    assert.ok(1);
  }
});

console.log('\n-----------------------------------------'.prompt);
console.log('  set background [color]'.prompt);
console.log('-----------------------------------------'.prompt);

describe('set background #ffffff', function() {
  var source = 'set background #ffffff';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'set');
  assert.ok(ast[0].key == 'background');
  assert.ok(ast[0].value == '#ffffff');
});

describe('set background #fff', function() {
  var source = 'set background #fff';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'set');
  assert.ok(ast[0].key == 'background');
  assert.ok(ast[0].value == '#fff');
});

describe('set background random', function() {
  var source = 'set background random';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'set');
  assert.ok(ast[0].key == 'background');
  assert.ok(ast[0].value == 'random');
});

describe('set background red', function() {
  var source = 'set background red';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'set');
  assert.ok(ast[0].key == 'background');
  assert.ok(ast[0].value == 'red');
});

console.log('\n= Rule Modifiers');
console.log('\n-----------------------------------------'.prompt);
console.log('  md / maxdepth [integer]'.prompt);
console.log('-----------------------------------------'.prompt);

describe('rule R1 maxdepth 10 { box }', function() {
  var source = 'rule R1 maxdepth 10 { box }';
  var ast = parser.parse(source);
  assert.ok(ast[0].type === 'rule');
  assert.ok(ast[0].id === 'R1');
  assert.ok(ast[0].params[0].key === 'maxdepth');
  assert.ok(ast[0].params[0].value === 10);
  assert.ok(ast[0].body.length === 1);
});

describe('rule R1 md 10 { box }', function() {
  var source = 'rule R1 md 10 { box }';
  var ast = parser.parse(source);
  assert.ok(ast[0].type === 'rule');
  assert.ok(ast[0].id === 'R1');
  assert.ok(ast[0].params[0].key === 'maxdepth');
  assert.ok(ast[0].params[0].value === 10);
  assert.ok(ast[0].body.length === 1);
});

describe('rule R1 maxdepth 10 > R2 { box }', function() {
  try {
    var source = 'rule R1 maxdepth 10.1 > R2 { box }';
    var ast = parser.parse(source);
  } catch (e) {
    
  }
});

describe('rule R1 md 10.1 > R2 { box }', function() {
  try {
    var source = 'rule R1 md 10.1 > R2 { box }';
    var ast = parser.parse(source);
  } catch (e) {
    
  }
});

describe('rule R1 maxdepth 10.1 { box }', function() {
  try {
    var source = 'rule R1 maxdepth 10.1 { box }';
    var ast = parser.parse(source);
    assert.ok(0);
  } catch (e) {
    
  }
});

describe('rule R1 maxdepth ten { box }', function() {
  try {
    var source = 'rule R1 maxdepth ten { box }';
    var ast = parser.parse(source);
    assert.ok(0);
  } catch (e) {
    
  }
});

console.log('\n-----------------------------------------'.prompt);
console.log('  w / weight [float]'.prompt);
console.log('-----------------------------------------'.prompt);

describe('rule R1 weight 10.1 { box }', function() {
  var source = 'rule R1 weight 10.1 { box }';
  var ast = parser.parse(source);
  assert.ok(ast[0].type === 'rule');
  assert.ok(ast[0].id === 'R1');
  assert.ok(ast[0].params[0].key === 'weight');
  assert.ok(ast[0].params[0].value === 10.1);
  assert.ok(ast[0].body.length === 1);
});

describe('rule R1 w 10.1 { box }', function() {
  var source = 'rule R1 w 10.1 { box }';
  var ast = parser.parse(source);
  assert.ok(ast[0].type === 'rule');
  assert.ok(ast[0].id === 'R1');
  assert.ok(ast[0].params[0].key === 'weight');
  assert.ok(ast[0].params[0].value === 10.1);
  assert.ok(ast[0].body.length === 1);
});

describe('rule R1 weight 10.1 { box }', function() {
  try {
    var source = 'rule R1 weight 10 { box }';
    var ast = parser.parse(source);
  } catch (e) {
    
  }
});

describe('rule R1 w 10.1 { box }', function() {
  try {
    var source = 'rule R1 w 10 { box }';
    var ast = parser.parse(source);
  } catch (e) {
    
  }
});

console.log('\n= Geometrical Transformations');
console.log('\n-----------------------------------------'.prompt);
console.log('  x [float]'.prompt);
console.log('-----------------------------------------'.prompt);

describe('{ x 1.2 } box', function() {
  var source = '{ x 1.2 } box';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'statement');
  assert.ok(ast[0].id == 'box');
  assert.ok(ast[0].exprs[0].left == 1);
  assert.ok(ast[0].exprs[0].right.properties[0].key == 'xshift');
  assert.ok(ast[0].exprs[0].right.properties[0].value == 1.2);
  assert.ok(ast[0].computed);
});

console.log('\n-----------------------------------------'.prompt);
console.log('  y [float]'.prompt);
console.log('-----------------------------------------'.prompt);

describe('{ y 1.2 } box', function() {
  var source = '{ y 1.2 } box';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'statement');
  assert.ok(ast[0].id == 'box');
  assert.ok(ast[0].exprs[0].left == 1);
  assert.ok(ast[0].exprs[0].right.properties[0].key == 'yshift');
  assert.ok(ast[0].exprs[0].right.properties[0].value == 1.2);
  assert.ok(ast[0].computed);
});

console.log('\n-----------------------------------------'.prompt);
console.log('  z [float]'.prompt);
console.log('-----------------------------------------'.prompt);

describe('{ z 1.2 } box', function() {
  var source = '{ z 1.2 } box';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'statement');
  assert.ok(ast[0].id == 'box');
  assert.ok(ast[0].exprs[0].left == 1);
  assert.ok(ast[0].exprs[0].right.properties[0].key == 'zshift');
  assert.ok(ast[0].exprs[0].right.properties[0].value == 1.2);
  assert.ok(ast[0].computed);
});

console.log('\n-----------------------------------------'.prompt);
console.log('  rx [float]'.prompt);
console.log('-----------------------------------------'.prompt);

describe('{ rx 1.2 } box', function() {
  var source = '{ rx 1.2 } box';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'statement');
  assert.ok(ast[0].id == 'box');
  assert.ok(ast[0].exprs[0].left == 1);
  assert.ok(ast[0].exprs[0].right.properties[0].key == 'rotatex');
  assert.ok(ast[0].exprs[0].right.properties[0].value == 1.2);
  assert.ok(ast[0].computed);
});

console.log('\n-----------------------------------------'.prompt);
console.log('  ry [float]'.prompt);
console.log('-----------------------------------------'.prompt);

describe('{ ry 1.2 } box', function() {
  var source = '{ ry 1.2 } box';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'statement');
  assert.ok(ast[0].id == 'box');
  assert.ok(ast[0].exprs[0].left == 1);
  assert.ok(ast[0].exprs[0].right.properties[0].key == 'rotatey');
  assert.ok(ast[0].exprs[0].right.properties[0].value == 1.2);
  assert.ok(ast[0].computed);
});

console.log('\n-----------------------------------------'.prompt);
console.log('  rz [float]'.prompt);
console.log('-----------------------------------------'.prompt);

describe('{ rz 1.2 } box', function() {
  var source = '{ rz 1.2 } box';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'statement');
  assert.ok(ast[0].id == 'box');
  assert.ok(ast[0].exprs[0].left == 1);
  assert.ok(ast[0].exprs[0].right.properties[0].key == 'rotatez');
  assert.ok(ast[0].exprs[0].right.properties[0].value == 1.2);
  assert.ok(ast[0].computed);
});

console.log('\n-----------------------------------------'.prompt);
console.log('  s [float]'.prompt);
console.log('-----------------------------------------'.prompt);

describe('{ s 1.2 } box', function() {
  var source = '{ s 1.2 } box';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'statement');
  assert.ok(ast[0].id == 'box');
  assert.ok(ast[0].exprs[0].left == 1);
  assert.ok(ast[0].exprs[0].right.properties[0].key == 'size');
  assert.ok(ast[0].exprs[0].right.properties[0].value[0] === 1.2);
  assert.ok(ast[0].exprs[0].right.properties[0].value[1] === 1.2);
  assert.ok(ast[0].exprs[0].right.properties[0].value[2] === 1.2);
  assert.ok(ast[0].computed);
});

console.log('\n-----------------------------------------'.prompt);
console.log('  s [f1] [f2] [f3]'.prompt);
console.log('-----------------------------------------'.prompt);

describe('{ s 2.1 2.2 2.3 } box', function() {
  var source = '{ s 2.1 2.2 2.3 } box';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'statement');
  assert.ok(ast[0].id == 'box');
  assert.ok(ast[0].exprs[0].left == 1);
  assert.ok(ast[0].exprs[0].right.properties[0].key == 'size');
  assert.ok(ast[0].exprs[0].right.properties[0].value[0] === 2.1);
  assert.ok(ast[0].exprs[0].right.properties[0].value[1] === 2.2);
  assert.ok(ast[0].exprs[0].right.properties[0].value[2] === 2.3);
  assert.ok(ast[0].computed);
});

console.log('\n-----------------------------------------'.prompt);
console.log('  m [f1] ... [f9]'.prompt);
console.log('-----------------------------------------'.prompt);

describe('{ s 2.1 2.2 2.3 } box', function() {
  var source = '{ m 2.1 2.2 2.3 2.4 2.5 2.6 2.7 2.8 2.9 } box';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'statement');
  assert.ok(ast[0].id == 'box');
  assert.ok(ast[0].exprs[0].left == 1);
  assert.ok(ast[0].exprs[0].right.properties[0].key == 'matrix');
  assert.ok(ast[0].exprs[0].right.properties[0].value[0] === 2.1);
  assert.ok(ast[0].exprs[0].right.properties[0].value[1] === 2.2);
  assert.ok(ast[0].exprs[0].right.properties[0].value[2] === 2.3);
  assert.ok(ast[0].exprs[0].right.properties[0].value[3] === 2.4);
  assert.ok(ast[0].exprs[0].right.properties[0].value[4] === 2.5);
  assert.ok(ast[0].exprs[0].right.properties[0].value[5] === 2.6);
  assert.ok(ast[0].exprs[0].right.properties[0].value[6] === 2.7);
  assert.ok(ast[0].exprs[0].right.properties[0].value[7] === 2.8);
  assert.ok(ast[0].exprs[0].right.properties[0].value[8] === 2.9);
  assert.ok(ast[0].computed);
});

console.log('\n= Color Space Transformations');
console.log('\n-----------------------------------------'.prompt);
console.log('  h / hue [float]'.prompt);
console.log('-----------------------------------------'.prompt);

describe('{ h 1.2 } box', function() {
  var source = '{ h 1.2 } box';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'statement');
  assert.ok(ast[0].id == 'box');
  assert.ok(ast[0].exprs[0].left == 1);
  assert.ok(ast[0].exprs[0].right.properties[0].key == 'hue');
  assert.ok(ast[0].exprs[0].right.properties[0].value == 1.2);
  assert.ok(ast[0].computed);
});

describe('{ hue 1.2 } box', function() {
  var source = '{ hue 1.2 } box';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'statement');
  assert.ok(ast[0].id == 'box');
  assert.ok(ast[0].exprs[0].left == 1);
  assert.ok(ast[0].exprs[0].right.properties[0].key == 'hue');
  assert.ok(ast[0].exprs[0].right.properties[0].value == 1.2);
  assert.ok(ast[0].computed);
});

console.log('\n-----------------------------------------'.prompt);
console.log('  sat / saturation [float]'.prompt);
console.log('-----------------------------------------'.prompt);

describe('{ sat 1.2 } box', function() {
  var source = '{ sat 1.2 } box';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'statement');
  assert.ok(ast[0].id == 'box');
  assert.ok(ast[0].exprs[0].left == 1);
  assert.ok(ast[0].exprs[0].right.properties[0].key == 'saturation');
  assert.ok(ast[0].exprs[0].right.properties[0].value == 1.2);
  assert.ok(ast[0].computed);
});

describe('{ saturation 1.2 } box', function() {
  var source = '{ saturation 1.2 } box';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'statement');
  assert.ok(ast[0].id == 'box');
  assert.ok(ast[0].exprs[0].left == 1);
  assert.ok(ast[0].exprs[0].right.properties[0].key == 'saturation');
  assert.ok(ast[0].exprs[0].right.properties[0].value == 1.2);
  assert.ok(ast[0].computed);
});

console.log('\n-----------------------------------------'.prompt);
console.log('  b / brightness [float]'.prompt);
console.log('-----------------------------------------'.prompt);

describe('{ b 1.2 } box', function() {
  var source = '{ b 1.2 } box';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'statement');
  assert.ok(ast[0].id == 'box');
  assert.ok(ast[0].exprs[0].left == 1);
  assert.ok(ast[0].exprs[0].right.properties[0].key == 'brightness');
  assert.ok(ast[0].exprs[0].right.properties[0].value == 1.2);
  assert.ok(ast[0].computed);
});

describe('{ brightness 1.2 } box', function() {
  var source = '{ brightness 1.2 } box';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'statement');
  assert.ok(ast[0].id == 'box');
  assert.ok(ast[0].exprs[0].left == 1);
  assert.ok(ast[0].exprs[0].right.properties[0].key == 'brightness');
  assert.ok(ast[0].exprs[0].right.properties[0].value == 1.2);
  assert.ok(ast[0].computed);
});

console.log('\n-----------------------------------------'.prompt);
console.log('  a / alpha [float]'.prompt);
console.log('-----------------------------------------'.prompt);

describe('{ a 1.2 } box', function() {
  var source = '{ a 1.2 } box';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'statement');
  assert.ok(ast[0].id == 'box');
  assert.ok(ast[0].exprs[0].left == 1);
  assert.ok(ast[0].exprs[0].right.properties[0].key == 'alpha');
  assert.ok(ast[0].exprs[0].right.properties[0].value == 1.2);
  assert.ok(ast[0].computed);
});

describe('{ alpha 1.2 } box', function() {
  var source = '{ alpha 1.2 } box';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'statement');
  assert.ok(ast[0].id == 'box');
  assert.ok(ast[0].exprs[0].left == 1);
  assert.ok(ast[0].exprs[0].right.properties[0].key == 'alpha');
  assert.ok(ast[0].exprs[0].right.properties[0].value == 1.2);
  assert.ok(ast[0].computed);
});

console.log('\n-----------------------------------------'.prompt);
console.log('  color [float]'.prompt);
console.log('-----------------------------------------'.prompt);

describe('{ color #fff } box', function() {
  var source = '{ color #fff } box';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'statement');
  assert.ok(ast[0].id == 'box');
  assert.ok(ast[0].exprs[0].left == 1);
  assert.ok(ast[0].exprs[0].right.properties[0].key == 'color');
  assert.ok(ast[0].exprs[0].right.properties[0].value == '#fff');
  assert.ok(ast[0].computed);
});

describe('{ color #ffffff } box', function() {
  var source = '{ color #ffffff } box';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'statement');
  assert.ok(ast[0].id == 'box');
  assert.ok(ast[0].exprs[0].left == 1);
  assert.ok(ast[0].exprs[0].right.properties[0].key == 'color');
  assert.ok(ast[0].exprs[0].right.properties[0].value == '#ffffff');
  assert.ok(ast[0].computed);
});

describe('{ color red } box', function() {
  var source = '{ color red } box';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'statement');
  assert.ok(ast[0].id == 'box');
  assert.ok(ast[0].exprs[0].left == 1);
  assert.ok(ast[0].exprs[0].right.properties[0].key == 'color');
  assert.ok(ast[0].exprs[0].right.properties[0].value == 'red');
  assert.ok(ast[0].computed);
});

describe('{ color random } box', function() {
  var source = '{ color random } box';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'statement');
  assert.ok(ast[0].id == 'box');
  assert.ok(ast[0].exprs[0].left == 1);
  assert.ok(ast[0].exprs[0].right.properties[0].key == 'color');
  assert.ok(ast[0].exprs[0].right.properties[0].value == 'random');
  assert.ok(ast[0].computed);
});

console.log('\n-----------------------------------------'.prompt);
console.log('  blend [color] [strength]'.prompt);
console.log('-----------------------------------------'.prompt);

describe('{ blend #fff 0.5 } box', function() {
  var source = '{ blend #fff 0.5 } box';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'statement');
  assert.ok(ast[0].id == 'box');
  assert.ok(ast[0].exprs[0].left == 1);
  assert.ok(ast[0].exprs[0].right.properties[0].key == 'blend');
  assert.ok(ast[0].exprs[0].right.properties[0].color == '#fff');
  assert.ok(ast[0].exprs[0].right.properties[0].strength == 0.5);
  assert.ok(ast[0].computed);
});

describe('{ blend #ffffff 0.5 } box', function() {
  var source = '{ blend #ffffff 0.5 } box';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'statement');
  assert.ok(ast[0].id == 'box');
  assert.ok(ast[0].exprs[0].left == 1);
  assert.ok(ast[0].exprs[0].right.properties[0].key == 'blend');
  assert.ok(ast[0].exprs[0].right.properties[0].color == '#ffffff');
  assert.ok(ast[0].exprs[0].right.properties[0].strength == 0.5);
  assert.ok(ast[0].computed);
});

describe('{ blend red 0.5 } box', function() {
  var source = '{ blend red 0.5 } box';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'statement');
  assert.ok(ast[0].id == 'box');
  assert.ok(ast[0].exprs[0].left == 1);
  assert.ok(ast[0].exprs[0].right.properties[0].key == 'blend');
  assert.ok(ast[0].exprs[0].right.properties[0].color == 'red');
  assert.ok(ast[0].exprs[0].right.properties[0].strength == 0.5);
  assert.ok(ast[0].computed);
});

describe('{ blend random 0.5 } box', function() {
  var source = '{ blend random 0.5 } box';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'statement');
  assert.ok(ast[0].id == 'box');
  assert.ok(ast[0].exprs[0].left == 1);
  assert.ok(ast[0].exprs[0].right.properties[0].key == 'blend');
  assert.ok(ast[0].exprs[0].right.properties[0].color == 'random');
  assert.ok(ast[0].exprs[0].right.properties[0].strength == 0.5);
  assert.ok(ast[0].computed);
});

console.log('\n-----------------------------------------'.prompt);
console.log('  set color random'.prompt);
console.log('-----------------------------------------'.prompt);

describe('{ set color random', function() {
  var source = 'set color random';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'set');
  assert.ok(ast[0].key == 'color');
  assert.ok(ast[0].value == 'random');
});

console.log('\n-----------------------------------------'.prompt);
console.log('  set colorpool [scheme]'.prompt);
console.log('-----------------------------------------'.prompt);

describe('{ set colorpool randomhue', function() {
  var source = 'set colorpool randomhue';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'set');
  assert.ok(ast[0].key == 'colorpool');
  assert.ok(ast[0].value == 'randomhue');
});

describe('{ set colorpool randomhue', function() {
  var source = 'set colorpool randomhue';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'set');
  assert.ok(ast[0].key == 'colorpool');
  assert.ok(ast[0].value == 'randomhue');
});

describe('{ set colorpool randomhue', function() {
  var source = 'set colorpool greyscale';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'set');
  assert.ok(ast[0].key == 'colorpool');
  assert.ok(ast[0].value == 'greyscale');
});

describe('{ set colorpool image:filename.png', function() {
  var source = 'set colorpool image:filename.png';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'set');
  assert.ok(ast[0].key == 'colorpool');
  assert.ok(ast[0].value == 'image:filename.png');
});

describe('{ set colorpool list:orange,white,grey', function() {
  var source = 'set colorpool list:orange,white,grey';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'set');
  assert.ok(ast[0].key == 'colorpool');
  assert.ok(ast[0].value == 'list:orange,white,grey');
});

console.log('\n= Drawing Primitives');
console.log('\n-----------------------------------------'.prompt);
console.log('  box'.prompt);
console.log('-----------------------------------------'.prompt);

describe('box', function() {
  var source = 'box';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'statement');
  assert.ok(ast[0].id == 'box');
  assert.ok(ast[0].exprs.length == 0);
  assert.ok(ast[0].computed == true);
});

console.log('\n-----------------------------------------'.prompt);
console.log('  grid'.prompt);
console.log('-----------------------------------------'.prompt);

describe('grid', function() {
  var source = 'grid';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'statement');
  assert.ok(ast[0].id == 'grid');
  assert.ok(ast[0].exprs.length == 0);
  assert.ok(ast[0].computed == true);
});

console.log('\n-----------------------------------------'.prompt);
console.log('  sphere'.prompt);
console.log('-----------------------------------------'.prompt);

describe('sphere', function() {
  var source = 'sphere';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'statement');
  assert.ok(ast[0].id == 'sphere');
  assert.ok(ast[0].exprs.length == 0);
  assert.ok(ast[0].computed == true);
});

console.log('\n-----------------------------------------'.prompt);
console.log('  line'.prompt);
console.log('-----------------------------------------'.prompt);

describe('line', function() {
  var source = 'line';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'statement');
  assert.ok(ast[0].id == 'line');
  assert.ok(ast[0].exprs.length == 0);
  assert.ok(ast[0].computed == true);
});

console.log('\n-----------------------------------------'.prompt);
console.log('  point'.prompt);
console.log('-----------------------------------------'.prompt);

describe('point', function() {
  var source = 'point';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'statement');
  assert.ok(ast[0].id == 'point');
  assert.ok(ast[0].exprs.length == 0);
  assert.ok(ast[0].computed == true);
});

console.log('\n-----------------------------------------'.prompt);
console.log('  triangle'.prompt);
console.log('-----------------------------------------'.prompt);

describe('triangle', function() {
  var source = 'triangle';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'statement');
  assert.ok(ast[0].id == 'triangle');
  assert.ok(ast[0].exprs.length == 0);
  assert.ok(ast[0].computed == true);
});

console.log('\n-----------------------------------------'.prompt);
console.log('  mesh'.prompt);
console.log('-----------------------------------------'.prompt);

describe('mesh', function() {
  var source = 'mesh';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'statement');
  assert.ok(ast[0].id == 'mesh');
  assert.ok(ast[0].exprs.length == 0);
  assert.ok(ast[0].computed == true);
});

console.log('\n-----------------------------------------'.prompt);
console.log('  cylinder'.prompt);
console.log('-----------------------------------------'.prompt);

describe('cylinder', function() {
  var source = 'cylinder';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'statement');
  assert.ok(ast[0].id == 'cylinder');
  assert.ok(ast[0].exprs.length == 0);
  assert.ok(ast[0].computed == true);
});

console.log('\n-----------------------------------------'.prompt);
console.log('  tube'.prompt);
console.log('-----------------------------------------'.prompt);

describe('tube', function() {
  var source = 'tube';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'statement');
  assert.ok(ast[0].id == 'tube');
  assert.ok(ast[0].exprs.length == 0);
  assert.ok(ast[0].computed == true);
});

console.log('\n= Preprocessor Commands');
console.log('\n-----------------------------------------'.prompt);
console.log('  define'.prompt);
console.log('-----------------------------------------'.prompt);

describe('#define varname 1.2', function() {
  var source = '#define varname 1.2';
  var ast = parser.parse(source);
  assert.ok(ast[0].type == 'define');
  assert.ok(ast[0].varname == 'varname');
  assert.ok(ast[0].value == 1.2);
});

// output report
sweet.report();

// process.stdin.resume();